 What library? RxJS
    contains operators to handle data streams
   What use? manipulating data streams

   What operators?
1) 	fromEvent(target, eventName, options); : Create observable from a DOM event
		ex fromEvent(input, 'input');		///creates observable that listens to input
			input entered --> event object emitted by observable
	
		ex fromEvent(button, 'click')		///creates observable that listens to click
			click entered --> event object emitted by observable
	
	1.1) How to handle event object? subscribing


		clickObservable.subscribe((event) => {
			  console.log('Button clicked');
		});

Conclusion: everytime button clicked ---> console.logs 'Button clicked'
We used 'fromEvent' to handle DOM events

Code:
Ex
	//.ts
	import { fromEvent } from 'rxjs';		//import fromEvent operator

	const input = document.getElementById('my-input');
	const inputObservable = fromEvent(input, 'input');	//use the operator

	//HTML:
	<input type="text" id="my-input" name="my-input" placeholder="Enter text here">

	//Conclusion: what DOM 



2) filter() : values emitted based on condition: value % 2 === 0
  
   	2.1) 	What is pipe? used to chain multiple operators

	2.2)  What is const numbersObservable = from([1, 2, 3, 4, 5]);
		//Creates an observable //observable emits values [1, 2, 3, 4, 5] one at a time

import { from } from 'rxjs';
import { filter } from 'rxjs/operators';

const numbersObservable = from([1, 2, 3, 4, 5]);

const evenNumbersObservable = numbersObservable.pipe(
  filter((value) => value % 2 === 0)
);

evenNumbersObservable.subscribe((value) => {	//subscribe to use values
  console.log(value); // Output: 2, 4
});




3) take() operator	//limit how many values

import { interval } from 'rxjs';
import { take } from 'rxjs/operators';

const numbersObservable = interval(1000);

const firstThreeNumbersObservable = numbersObservable.pipe(
  take(3)
);

firstThreeNumbersObservable.subscribe((value) => {
  console.log(value); // Output: 0, 1, 2
});




4) distinctUntilChanged()	//filters consecutive values


import { from } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';

const numbersObservable = from([1, 1, 2, 2, 3, 4, 4]);

const distinctNumbersObservable = numbersObservable.pipe(
  distinctUntilChanged()
);

distinctNumbersObservable.subscribe((value) => {
  console.log(value); // Output: 1, 2, 3, 4
});








2) What is a stream in angular? sequence of data

 2.1) used to handle asynchronous data streams
 2.2) asynchronous data sources == user input, network request
 2.3) building block of stream = Observables

	2.3.1) What is Observable?
		 Representation of a stream
		//subscribe to observable --> subscribe to stream
	Ex
	//.ts
	import { fromEvent } from 'rxjs';		//import fromEvent operator

	const input = document.getElementById('my-input');
	const inputObservable = fromEvent(input, 'input');	//use the operator

	//HTML:
	<input type="text" id="my-input" name="my-input" placeholder="Enter text here">

	//Conclusion: what DOM 