1) Testability Features
 1.1) mock HTTP requests for testing purposes



import { HttpClient } from '@angular/common/http';

class MyService {
  constructor(private http: HttpClient) {}

  getData() {
    return this.http.get('/api/data');
  }
}

// In the unit test:
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';

describe('MyService', () => {
  let service: MyService;
  let httpTestingController: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [MyService]
    });

    service = TestBed.inject(MyService);
    httpTestingController = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpTestingController.verify();
  });

  it('should get data from the API', () => {
    const testData = { some: 'data' };

    service.getData().subscribe(data => {
      expect(data).toEqual(testData);
    });

    const req = httpTestingController.expectOne('/api/data');
    expect(req.request.method).toEqual('GET');
    req.flush(testData);
  });
});



2) Typed Request and Response Objects
  2.1) can specify expected type of request and response objects


interface MyData {
  some: string;
  other: number;
}

class MyService {
  constructor(private http: HttpClient) {}

  getData(): Observable<MyData> {
    return this.http.get<MyData>('/api/data');
  }
}

// In the component:
import { MyData } from './my-data';

class MyComponent {
  data: MyData;

  constructor(private service: MyService) {}

  ngOnInit() {
    this.service.getData().subscribe(data => {
      this.data = data;
    });
  }
}




3) Intercept Request and Response
  3.1) Intercept HTTP request and response
	//can add custom headers,logging, error handling

class MyInterceptor implements HttpInterceptor {
  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const authReq = req.clone({
      headers: req.headers.set('Authorization', 'Bearer my-token')
    });

    return next.handle(authReq).pipe(
      tap(event => {
        if (event instanceof HttpResponse) {
          console.log('Received response with status code', event.status);
        }
      }),
      catchError(err => {
        console.log('An error occurred:', err);
        return throwError(err);
      })
    );
  }
}

// In the module:
@NgModule({
  imports: [HttpClientModule],
  providers: [
    { provide: HTTP_INTERCEPTORS, useClass: MyInterceptor, multi: true }
  ]
})
class MyModule {}

// Now all HTTP requests in the application will be intercepted by MyInterceptor.



4) Observable API	
	HttpClient uses observables
	what observables do? handle asynchronous operations
	what asynchronous operations --> more performance, more flexibility than traditional callbacks


class MyService {
  constructor(private http: HttpClient) {}

  getData(): Observable<MyData[]> {
    return this.http.get<MyData[]>('/api/data');
  }
}

// In the component:
import { MyData } from './my-data';

class MyComponent {
  data: MyData[];

  constructor(private service: MyService) {}

  ngOnInit() {
    this.service.getData().subscribe(data => {
      this.data = data;
    });
  }
}



5) Streamlined error handling
	How? 'catchError' operator
	Handle HTTP errors consistenly


import { catchError } from 'rxjs/operators';

class MyService {
  constructor(private http: HttpClient) {}

  getData(): Observable<MyData[]> {
    return this.http.get<MyData[]>('/api/data').pipe(
      catchError(error => {					//catches any errors during HTTP 										request
        console.log('An error occurred:', error);
        return throwError('Failed to fetch data');    //return new observable --> emits 										//error message
      })
    );
  }
}

// In the component:
import { MyData } from './my-data';

class MyComponent {
  data: MyData[];
  error: string;

  constructor(private service: MyService) {}

  ngOnInit() {
    this.service.getData().subscribe(
      data => {
        this.data = data;
      },
      error => {
        this.error = error;
      }
    );
  }
}

Conclusion: Didnt have to write error handling code for every HTTP request
